<!DOCTYPE html>
<html>

    <%- include('partials/head') %>

    <body>

        <header>
        	<div class="headerwrapper">
        		<%- include('partials/header-left') %>
        		<%- include('partials/header-right') %>
        	</div>
        </header>

		<section>
			<div class="mainwrapper">
				<%- include('partials/left-panel') %>
				<div class="mainpanel">
					<div class="pageheader">
                        <div class="media">
                            <div class="pageicon pull-left">
                                <i class="fa fa-gear"></i>
                            </div>
                            <div class="media-body">
                                <ul class="breadcrumb">
                                    <li><a href="/"><i class="glyphicon glyphicon-home"></i></a></li>
                                    <li>Ripper</li>
                                </ul>
                                <h4>Ripper</h4>
                            </div>
                        </div>
                    </div>
					<div class="contentpanel">
					 	<div class="row row-stat">
                        	<div id="network"></div>
                    	</div>
 					</div>
				</div>
			</div>
		</section>
		        
		<%- include('partials/scripts-js') %>

		<script>
			// Init url
            var url = 'http://localhost:8080';
            var socket = io.connect(url);

            /* RIPPER */
            socket.emit('get_ripper');

            socket.on('return_info_ripper', function (ripperData) {
                console.log(ripperData[1]);

                var ripperNodes = [];
                var ripperEdges = [];
                var i = 1;
                ripperData[1].forEach(function(rule){
                    if(rule[0] != 'null'){
                        var node = {
                            id: 2*i,
                            label: rule[0].replace(/and/g, 'and\n')
                        };
                        ripperNodes.push(node);

                        var nodeSchedule = {
                            id: (2*i)+1,
                            label: rule[1]
                        };
                        ripperNodes.push(nodeSchedule);

                        var edge = {
                            from: 2*i,
                            to: 2*(i+1),
                            label: 'No'
                        };
                        ripperEdges.push(edge);

                        var edgeSchedule = {
                            from: 2*i,
                            to: (2*i)+1,
                            label: 'Yes'
                        };
                        ripperEdges.push(edgeSchedule);
                    } else{
                        var lastNode = {
                            id: 2*i,
                            label: rule[1]
                        };
                        ripperNodes.push(lastNode);
                    }

                    i++;
                });

                // create an array with nodes
                var nodes = ripperNodes;

                // create an array with edges
                var edges = ripperEdges;

                // create a network
                var container = document.getElementById('network');
                var data = {
                    nodes: nodes,
                    edges: edges
                };
                var canvasHeight = i*110 + 'px';
                var options = {
                    width:'100%',
                    height: canvasHeight,
                    layout: {
                        hierarchical: {
                            sortMethod: "directed",
                            nodeSpacing: 250
                        }
                    }
                };
                var network = new vis.Network(container, data, options);
            });
		</script>
	</body>
</html>