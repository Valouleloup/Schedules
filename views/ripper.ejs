<!DOCTYPE html>
<html>

    <%- include('partials/head') %>

    <body>

        <header>
        	<div class="headerwrapper">
        		<%- include('partials/header-left') %>
        		<%- include('partials/header-right') %>
        	</div>
        </header>

		<section>
			<div class="mainwrapper">
				<%- include('partials/left-panel') %>
				<div class="mainpanel">
					<%- include('partials/page-header') %>
					 <div class="contentpanel">
					 	<div class="row row-stat">
                        	<h3>Networks</h3>
							<select name="nb-clusters" class="nb-clusters" title="nb-clusters">
								<option value="2">K = 2</option>
								<option value="3">K = 3</option>
								<option value="4">K = 4</option>
								<option value="5">K = 5</option>
							</select>

							<div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
								<div class="panel panel-default">
									<div class="panel-heading" role="tab" id="headingOne">
										<h4 class="panel-title">
											<a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
												Data file for Ripper algorithm
											</a>
										</h4>
									</div>
									<div id="collapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
										<div class="panel-body">
											<div id="file-content"></div>
										</div>
									</div>
								</div>
								<div class="panel panel-default">
									<div class="panel-heading" role="tab" id="headingTwo">
										<h4 class="panel-title">
											<a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
												Ripper rules tree
											</a>
										</h4>
									</div>
									<div id="collapseTwo" class="panel-collapse collapse in" role="tabpanel" aria-labelledby="headingTwo">
										<div class="panel-body">
											<h3 class="ripper-accuracy">Accuracy</h3>
											<div id="network"></div>
										</div>
									</div>
								</div>
							</div>
                    	</div>
 					</div>
				</div>
			</div>
		</section>
		        
		<%- include('partials/scripts-js') %>

		<script>
			// Init url
            var url = 'http://localhost:8080';
            var socket = io.connect(url);

            /* RIPPER */
            socket.emit('get_ripper', 4);

			$('.nb-clusters').on('change', function(){
				var nbCluster = $('.nb-clusters option:selected').val();
				socket.emit('get_ripper', nbCluster);
			});

            socket.on('return_info_ripper', function (ripperData) {
                console.log(ripperData[1]);

				$('.ripper-accuracy').html('Accuracy : ' + Math.round(ripperData[0], 2) + ' %');

                var ripperNodes = [];
                var ripperEdges = [];
                var i = 1;
                ripperData[1].forEach(function(rule){
                    if(rule[0] != 'null'){
                        var node = {
                            id: 2*i,
                            label: rule[0].replace(/and/g, 'and\n')
                        };
                        ripperNodes.push(node);

                        var nodeSchedule = {
                            id: (2*i)+1,
                            label: rule[1]
                        };
                        ripperNodes.push(nodeSchedule);

                        var edge = {
                            from: 2*i,
                            to: 2*(i+1),
                            label: 'No'
                        };
                        ripperEdges.push(edge);

                        var edgeSchedule = {
                            from: 2*i,
                            to: (2*i)+1,
                            label: 'Yes'
                        };
                        ripperEdges.push(edgeSchedule);
                    } else{
                        var lastNode = {
                            id: 2*i,
                            label: rule[1]
                        };
                        ripperNodes.push(lastNode);
                    }

                    i++;
                });

                // create an array with nodes
                var nodes = ripperNodes;

                // create an array with edges
                var edges = ripperEdges;

                // create a network
                var container = document.getElementById('network');
                var data = {
                    nodes: nodes,
                    edges: edges
                };
                var canvasHeight = i*90 + 'px';
                var options = {
                    width:'100%',
                    height: canvasHeight,
                    layout: {
                        hierarchical: {
                            sortMethod: "directed",
                            nodeSpacing: 250
                        }
                    }
                };
                var network = new vis.Network(container, data, options);
            });

			socket.on('return_test_file', function (testFile) {
				console.log(testFile);
				$('#file-content').html(testFile.replace(/@/g, '<br/>@'));
			});

		</script>
	</body>
</html>